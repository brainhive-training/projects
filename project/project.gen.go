// Package project provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package project

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ProjectStatus.
const (
	ProjectStatusActive   ProjectStatus = "active"
	ProjectStatusInactive ProjectStatus = "inactive"
)

// Defines values for UpdateProjectStatus.
const (
	UpdateProjectStatusActive   UpdateProjectStatus = "active"
	UpdateProjectStatusInactive UpdateProjectStatus = "inactive"
)

// CreateProject defines model for CreateProject.
type CreateProject struct {
	DCode       string  `json:"dCode"`
	Description *string `json:"description,omitempty"`
	OwnerName   string  `json:"ownerName"`
	ProjectName string  `json:"projectName"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Project defines model for Project.
type Project struct {
	DCode       string        `json:"dCode"`
	OwnerName   *string       `json:"ownerName,omitempty"`
	PCode       string        `json:"pCode"`
	ProjectName string        `json:"projectName"`
	Status      ProjectStatus `json:"status"`
}

// ProjectStatus defines model for Project.Status.
type ProjectStatus string

// UpdateProject defines model for UpdateProject.
type UpdateProject struct {
	OwnerName   *string              `json:"ownerName,omitempty"`
	ProjectName *string              `json:"projectName,omitempty"`
	Status      *UpdateProjectStatus `json:"status,omitempty"`
}

// UpdateProjectStatus defines model for UpdateProject.Status.
type UpdateProjectStatus string

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = CreateProject

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody = UpdateProject

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get projects
	// (GET /api/projects)
	ListProjects(c *gin.Context)
	// Create a new project
	// (POST /api/projects)
	CreateProject(c *gin.Context)
	// Get project by pCode
	// (GET /api/projects/{code})
	GetProject(c *gin.Context, code string)
	// Update project
	// (PATCH /api/projects/{code})
	UpdateProject(c *gin.Context, code string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProjects(c)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProject(c)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", c.Param("code"), &code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProject(c, code)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", c.Param("code"), &code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProject(c, code)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/projects", wrapper.ListProjects)
	router.POST(options.BaseURL+"/api/projects", wrapper.CreateProject)
	router.GET(options.BaseURL+"/api/projects/:code", wrapper.GetProject)
	router.PATCH(options.BaseURL+"/api/projects/:code", wrapper.UpdateProject)
}
